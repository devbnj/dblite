/**
 * sqlite-enc.js
 * 
 */
/*jshint esversion: 6 */
/*jshint node: true*/

'use strict';

var fs = require('fs');
var crypto = require('crypto');

/**
 * Forward declaration
 */
function sqliteEnc() { }

// Variables
sqliteEnc.prototype = require('./sqlite-append-sync');
sqliteEnc.prototype.buffer = null;
sqliteEnc.prototype.file2 = null;
sqliteEnc.prototype.password = 'MasterGeeks';
sqliteEnc.prototype.algorithm = 'aes-256-ctr';
sqliteEnc.prototype.algorithms = crypto.getCiphers();
sqliteEnc.prototype.iv = null;

/**
   * Buffer decryption
   *
   * @param {Object} buffer - Encrypted buffer
   * @param {String} algorithm - Algorithm
   * @param {String} password - Password
   * @return {Object} - Decrypted buffer
 */
sqliteEnc.prototype.pvDecrypt = function (buffer, algorithm, password) {
    algorithm = algorithm || this.algorithm;
    password = password || this.password;
    let decipher;
    if (this.iv) {
        decipher = crypto.createDecipheriv(algorithm, password, this.iv);
    } else {
        decipher = crypto.createDecipher(algorithm, password);
    }
    return (Buffer.concat([decipher.update(buffer), decipher.final()]));
}

/**
   * Buffer encryption
   *
   * @param {Object} buffer - buffer
   * @param {String} algorithm - Algorithm
   * @param {String} password - Password
   * @return {Object} - Encrypted buffer
 */
sqliteEnc.prototype.pvEncrypt = function (buffer, algorithm, password) {
    algorithm = algorithm || this.algorithm;
    password = password || this.password;
    let cipher;
    if (this.iv) {
        cipher = crypto.createCipheriv(algorithm, password, this.iv);
    } else {
        cipher = crypto.createCipher(algorithm, password);
    }
    return (Buffer.concat([cipher.update(buffer), cipher.final()]));
}


//////////////////////////////
// From bytestokey.js
// https://gist.github.com/bnoordhuis/2de2766d3d3a47ebe41aaaec7e8b14df

const { createCipheriv, createHash } = require('crypto');

function sizes(cipher) {
    for (let nkey = 1, niv = 0; ;) {
        try {
            createCipheriv(cipher, '.'.repeat(nkey), '.'.repeat(niv));
            return [nkey, niv];
        } catch (e) {
            if (/invalid iv length/i.test(e.message)) niv += 1;
            else if (/invalid key length/i.test(e.message)) nkey += 1;
            else throw e;
        }
    }
}

function compute(cipher, passphrase) {
    let [nkey, niv] = sizes(cipher);
    for (let key = '', iv = '', p = ''; ;) {
        const h = createHash('md5');
        h.update(p, 'hex');
        h.update(passphrase);
        p = h.digest('hex');
        let n, i = 0;
        n = Math.min(p.length - i, 2 * nkey);
        nkey -= n / 2, key += p.slice(i, i + n), i += n;
        n = Math.min(p.length - i, 2 * niv);
        niv -= n / 2, iv += p.slice(i, i + n), i += n;
        if (nkey + niv === 0) return [key, iv];
    }
}

//////////////////////////////
// End bytestokey.js


/**
   * Database connection
   *
   * @param {String} db - File directory+filename
   * @param {String} password 
   * @param {String} algorithm
   * @return {Object}
 */
sqliteEnc.prototype.connect = function (db, password, algorithm) {
    this.file2 = db;
    this.algorithm = algorithm || this.algorithm;
    // this.password = password || this.password;
    const [key, iv] = compute(algorithm, password);
    this.password = Buffer.from(key, 'hex');
    this.iv = Buffer.from(iv, 'hex');

    var self = this;

    if (this.algorithms.indexOf(this.algorithm) == -1) {
        throw "Algorithm not supported";
    }

    if (fs.existsSync(db)) {
        var file2 = fs.readFileSync(db);
        var file2buffer = this.pvDecrypt(file2);
        this.con(file2buffer);
    } else {
        this.con(1);
    }

    /*
    var res = this.exec("CREATE TABLE jayr(name TEXT)");
    if (res.error) {
        throw "Invalid Password! Please check your password or database name.";
    } else {
        this.exec("DROP TABLE jayr")
    }
    */

    return this;
}

/**
   * Write the file
   *
   * @param {Object} buffer - buffer from sqlite-sync
 */
sqliteEnc.prototype.writer = function (buffer) {
    var data = this.pvEncrypt(Buffer.from(buffer, "utf-8"));
    var buffer = Buffer.from(data);
    fs.writeFileSync(this.file2, buffer);
}

/**
   * File decryption
   *
   * @param {String} from - encrypted file way
   * @param {String} to - decrypted file way
   * @param {String} password 
   * @param {String} algorithm
   * @return {Object}
 */
sqliteEnc.prototype.decrypt = function (from, to, password, algorithm, options) {
    if (fs.existsSync(from)) {
        if (options) {
            if (options.iv) {
                this.iv = options.iv;
            }
        }
        this.algorithm = algorithm || this.algorithm;
        this.password = password || this.password;
        if (this.algorithms.indexOf(this.algorithm) == -1) {
            throw "Algorithm not supported";
        }
        var file2 = fs.readFileSync(from);
        var data = this.pvDecrypt(file2);
        var buffer = Buffer.from(data);
        fs.writeFileSync(to, buffer);
    } else {
        throw "File not found!";
    }
    return this;
}

/**
   * File encryption
   *
   * @param {String} from - decrypted file way
   * @param {String} to - encrypted file way
   * @param {String} password 
   * @param {String} algorithm
   * @return {Object}
 */
sqliteEnc.prototype.encrypt = function (from, to, password, algorithm, options) {
    if (fs.existsSync(from)) {
        if (options) {
            if (options.iv) {
                this.iv = options.iv;
            }
        }
        this.algorithm = algorithm || this.algorithm;
        this.password = password || this.password;
        if (this.algorithms.indexOf(this.algorithm) == -1) {
            throw "Algorithm not supported";
        }
        var db = fs.readFileSync(from);
        var data = this.pvEncrypt(Buffer.from(db, "utf-8"));
        var buffer = Buffer.from(data);
        fs.writeFileSync(to, buffer);
    } else {
        throw "File not found!";
    }
    return this;
}


/**
	* Changing password
	*
	* @param {String} file - file path
	* @param {String} oldPassword - password
	* @param {String} newPassword - password
	* @param {String} algorithm - algorithm
	* @param {String} newAlgorithm - newAlgorithm
*/

sqliteEnc.prototype.change = function (file, oldPassword, newPassword, algorithm, newAlgorithm) {
    if (!file) {
        throw "Please suggest a file!";
    } else {
        if (fs.existsSync(file)) {
            if (!oldPassword || typeof (oldPassword) != "string") {
                throw "Please send your password!";
            } else if (!newPassword || typeof (newPassword) != "string") {
                throw "Please send your new password!";
            } else {
                if (typeof (algorithm) != 'string') {
                    callback = algorithm;
                    algorithm = this.algorithm;
                }
                if (this.algorithms.indexOf(algorithm) == -1) {
                    throw "Algorithm not supported";
                } else {
                    if (typeof (newAlgorithm) != 'string') {
                        callback = newAlgorithm;
                        newAlgorithm = algorithm;
                    }
                    if (this.algorithms.indexOf(newAlgorithm) == -1) {
                        throw "New algorithm not supported";
                    } else {
                        try {
                            this.connect(file, oldPassword, algorithm);
                            var decrypted = this.pvDecrypt(fs.readFileSync(file), algorithm, oldPassword);
                            var encrypted = this.pvEncrypt(decrypted, newAlgorithm, newPassword);
                            var buffer = Buffer.from(encrypted);
                            fs.writeFileSync(file, buffer);
                        } catch (ex) {
                            throw ex;
                        }
                    }
                }
            }
        } else {
            throw "File not found!";
        }
    }


};

module.exports = new sqliteEnc();
